name: Release multi-arch Docker Image

on:
  release:
    types: [ published ]

env:
  IMAGE_REPOSITORY: testcontainers/ryuk

jobs:
  release-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker info
        run: docker info
      - name: Buildx inspect
        run: docker buildx inspect

      - name: Build and push image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: linux/Dockerfile
          platforms: linux/amd64,linux/arm/v7,linux/arm64,linux/ppc64le,linux/s390x,linux/386,linux/arm/v6
          push: true
          tags: ${{ env.IMAGE_REPOSITORY }}:${{ github.event.release.tag_name }}-linux

  release-windows:
    strategy:
      matrix:
        os-version:
          - ltsc2019
          - ltsc2022
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker info
        run: docker info

      - name: Build image
        run: |
          docker build -f windows/Dockerfile --build-arg BASE_IMAGE=mcr.microsoft.com/windows/nanoserver:${{ matrix.os-version }} -t ${{ env.IMAGE_REPOSITORY }}:${{ github.event.release.tag_name }}-windows.${{ matrix.os-version }} .

      - name: Push image
        run: |
          docker push ${{ env.IMAGE_REPOSITORY }}:${{ github.event.release.tag_name }}-windows.${{ matrix.os-version }}

  release:
    needs:
      - release-linux
      - release-windows
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker info
        run: docker info
      - name: Buildx inspect
        run: docker buildx inspect

      - name: Get os version for nanoserver:ltsc2019
        run: >-
          full_version=$(docker manifest inspect mcr.microsoft.com/windows/nanoserver:ltsc2019 | jq -r '.manifests[]|.platform|."os.version"'| sed 's@.*:@@') || true;
          echo "OS_VERSION_ltsc2019=${full_version}" >> $GITHUB_ENV;

      - name: Get os version for nanoserver:ltsc2022
        run: >-
          full_version=$(docker manifest inspect mcr.microsoft.com/windows/nanoserver:ltsc2022 | jq -r '.manifests[]|.platform|."os.version"'| sed 's@.*:@@') || true;
          echo "OS_VERSION_ltsc2022=${full_version}" >> $GITHUB_ENV;

      - name: Docker Manifest
        run: >-
          target_image=${{ env.IMAGE_REPOSITORY }}:${{ github.event.release.tag_name }};
          linux_manifest=$(docker manifest inspect ${target_image}-linux);
          linux_digests=$(docker manifest inspect ${target_image}-linux | jq -r '.manifests[].digest');
          manifest_list=${linux_digests//sha256:/${target_image%%:*}@sha256:};
          manifest_list+=" ${target_image}-windows.ltsc2019";
          manifest_list+=" ${target_image}-windows.ltsc2022";
          docker manifest create ${target_image} ${manifest_list};
          docker manifest annotate \
              --os-version ${OS_VERSION_ltsc2019} \
              --os windows \
              --arch amd64 \
              ${target_image} "${target_image}-windows.ltsc2019";
          docker manifest annotate \
              --os-version ${OS_VERSION_ltsc2022} \
              --os windows \
              --arch amd64 \
              ${target_image} "${target_image}-windows.ltsc2022";
          docker manifest push ${target_image};

  check-release:
    runs-on: ubuntu-latest
    needs:
      - publish-multi-arch-image
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Print multi-arch manifest
        run: |
          docker manifest inspect --verbose ${{ env.IMAGE_REPOSITORY }}:${{ github.event.release.tag_name }} > manifest_complete.json
          cat manifest_complete.json | jq ".[].Descriptor.platform" | jq "(.architecture + \"_\" + .os + \"_\") + .\"os.version\"" | sort | uniq > architectures_actual.txt

      - name: Check multi-arch manifest
        run: |
          cat architectures.txt | sort | uniq > architectures_expected.txt
          diff architectures_expected.txt architectures_actual.txt
